
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083e  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
}

// Initialize timer 1: fast PWM at pin PORTB.6 (hundredth ms)
void timer1Init( void )
{
	TCCR1B = 0b00011010;			// fast PWM, TOP = ICR1, prescaler=8 (1MHz), RUN
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <wait+0x12>
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	4a 95       	dec	r20
  a8:	f1 f7       	brne	.-4      	; 0xa6 <wait+0x8>
  aa:	00 c0       	rjmp	.+0      	; 0xac <wait+0xe>
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	28 17       	cp	r18, r24
  b2:	39 07       	cpc	r19, r25
  b4:	bc f3       	brlt	.-18     	; 0xa4 <wait+0x6>
  b6:	08 95       	ret

000000b8 <adcInit>:
}

void adcInit( void ) {
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  b8:	81 e6       	ldi	r24, 0x61	; 97
  ba:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  bc:	86 ee       	ldi	r24, 0xE6	; 230
  be:	86 b9       	out	0x06, r24	; 6
  c0:	08 95       	ret

000000c2 <main>:
}

// Main program: Counting on T1
int main( void )
{
	DDRA = 0xFD;
  c2:	8d ef       	ldi	r24, 0xFD	; 253
  c4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00;
  c8:	11 ba       	out	0x11, r1	; 17
	DDRC = 0xFF;					// set PORTA for output in main program
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	DDRF = 0x00;
  ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	adcInit();
  d2:	f2 df       	rcall	.-28     	; 0xb8 <adcInit>
	
	int TONE = 1;
  d4:	c1 e0       	ldi	r28, 0x01	; 1
  d6:	d0 e0       	ldi	r29, 0x00	; 0

	while (1)
	{
		if (PINA)
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	88 23       	and	r24, r24
  dc:	11 f0       	breq	.+4      	; 0xe2 <main+0x20>
		{
			TONE = 1;
  de:	c1 e0       	ldi	r28, 0x01	; 1
  e0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PINB)
  e2:	86 b3       	in	r24, 0x16	; 22
  e4:	88 23       	and	r24, r24
  e6:	11 f0       	breq	.+4      	; 0xec <main+0x2a>
		{
			TONE = 2;
  e8:	c2 e0       	ldi	r28, 0x02	; 2
  ea:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PIND)
  ec:	80 b3       	in	r24, 0x10	; 16
  ee:	88 23       	and	r24, r24
  f0:	11 f0       	breq	.+4      	; 0xf6 <main+0x34>
		{
			TONE = 3;
  f2:	c3 e0       	ldi	r28, 0x03	; 3
  f4:	d0 e0       	ldi	r29, 0x00	; 0
		}
		PORTC ^= BIT(1);
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	89 27       	eor	r24, r25
  fc:	85 bb       	out	0x15, r24	; 21
		wait(ADCH*TONE);		
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	28 2f       	mov	r18, r24
 102:	2c 9f       	mul	r18, r28
 104:	c0 01       	movw	r24, r0
 106:	2d 9f       	mul	r18, r29
 108:	90 0d       	add	r25, r0
 10a:	11 24       	eor	r1, r1
 10c:	c8 df       	rcall	.-112    	; 0x9e <wait>
	}
 10e:	e4 cf       	rjmp	.-56     	; 0xd8 <main+0x16>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
